/** *********************************
1994. 二哥的地图
题目描述
二哥最近拿到了一份世界地图，这个地图是一个N*M的矩阵，每个格子代表一块地方，有可能是陆地或者海洋。
这个地图并没有把国家标注出来，在强烈的好奇心的驱使下，二哥想知道这块地图上有最多可能有多少个国家。在这里，我们认为海洋不属于任何一个国家，
每一块陆地属于且仅属于一个国家，并且相邻的陆地属于同一个国家。

输入格式
第一行两个整数N和M，表示地图大小。

接下来N行，每行M个整数。表示这个地图，0代表陆地，-1代表海洋。

输出格式
输出一个整数，表示地图上最多可能的国家数。

数据范围
对于全部数据：
1 ≤ n, m ≤ 500

样例输入
3 3
0 -1 0
-1 0 -1
0 -1 0
样例输出
5
限制
时间限制：1000ms，内存限制：65536kb

**************************************** **/

using namespace std;
int Map[507][507];
int lenth, breadth;
bool status[507][507];
int Queue[250007][2];   /// 0 records its row, 1 records its list
int rear_p, top_p;
int cnt = 0;
 
void enQueue(int row, int list)
{
    Queue[++top_p][0] = row;
    Queue[top_p][1] = list;
    status[row][list] = false;
}
 
void deQueue()
{
    rear_p++;
    int row = Queue[rear_p][0], list = Queue[rear_p][1];
 
    if(row > 1 && status[row-1][list])
        enQueue(row-1, list);
    if(list > 1 && status[row][list-1])
        enQueue(row, list-1);
    if(row < lenth && status[row+1][list])
        enQueue(row+1, list);
    if(list < breadth && status[row][list+1])
        enQueue(row, list+1);
 
}
 
int main()
{
    cin>>lenth>>breadth;
    for(int i=1; i<=lenth; i++)
    {
        for(int j=1; j<=breadth; j++)
        {
            cin>>Map[i][j];
            if(Map[i][j] == 0)
                status[i][j] = true;
            else status[i][j] = false;
        }
    }
    for(int i=1; i<=lenth; i++)
    {
        for(int j=1; j<=breadth; j++)
        {
            if(!status[i][j]) continue;
            rear_p = 0; top_p = 0;
            enQueue(i, j);
 
            while(rear_p != top_p)
            {
                deQueue();
            }
            cnt++;
        }
    }
    cout<<cnt;
    return 0;
}

